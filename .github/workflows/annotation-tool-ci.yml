name: Annotation Tool CI

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'tools/annotation/**'
      - '.github/workflows/annotation-tool-ci.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'tools/annotation/**'
      - '.github/workflows/annotation-tool-ci.yml'

env:
  ANNOTATION_TOOL_PATH: tools/annotation

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11, 3.12]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('tools/annotation/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-dev python3-pip

    - name: Install Python dependencies
      run: |
        cd ${{ env.ANNOTATION_TOOL_PATH }}
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt

    - name: Lint with flake8
      run: |
        cd ${{ env.ANNOTATION_TOOL_PATH }}
        pip install flake8
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=120 --statistics

    - name: Format check with Black
      run: |
        cd ${{ env.ANNOTATION_TOOL_PATH }}
        pip install black
        black --check --line-length=120 . || (echo "Code formatting issues found. Run 'black --line-length=120 .' to fix." && exit 1)

    - name: Type check with mypy (optional)
      continue-on-error: true
      run: |
        cd ${{ env.ANNOTATION_TOOL_PATH }}
        pip install mypy
        mypy . --ignore-missing-imports || echo "Type checking completed with warnings"

    - name: Run unit tests
      run: |
        cd ${{ env.ANNOTATION_TOOL_PATH }}
        export PYTHONPATH=$PWD:$PYTHONPATH
        python -m pytest tests/unit/ -v --tb=short --cov=. --cov-branch --cov-report=xml --cov-report=term-missing:skip-covered

    - name: Run integration tests
      run: |
        cd ${{ env.ANNOTATION_TOOL_PATH }}
        export PYTHONPATH=$PWD:$PYTHONPATH
        python -m pytest tests/integration/ -v --tb=short --cov=. --cov-branch --cov-report=xml --cov-report=term-missing:skip-covered --cov-append

    - name: Run full test suite with coverage
      run: |
        cd ${{ env.ANNOTATION_TOOL_PATH }}
        export PYTHONPATH=$PWD:$PYTHONPATH
        make ci

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./tools/annotation/coverage.xml
        directory: ./tools/annotation/
        flags: annotation-tool
        name: annotation-tool-coverage
        fail_ci_if_error: false

    - name: Generate test report
      if: always()
      run: |
        cd ${{ env.ANNOTATION_TOOL_PATH }}
        export PYTHONPATH=$PWD:$PYTHONPATH
        python -m pytest tests/ --tb=short --junitxml=pytest-results.xml

    - name: Publish test results
      uses: EnricoMi/publish-unit-test-result-action@v2
      if: always()
      with:
        files: tools/annotation/pytest-results.xml
        check_name: "Annotation Tool Test Results (Python ${{ matrix.python-version }})"

  security:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install security tools
      run: |
        pip install bandit safety

    - name: Run Bandit security scan
      run: |
        cd ${{ env.ANNOTATION_TOOL_PATH }}
        bandit -r . -f json -o bandit-results.json || true
        bandit -r . -f txt

    - name: Run Safety check
      run: |
        cd ${{ env.ANNOTATION_TOOL_PATH }}
        safety check --json --output safety-results.json || true
        safety check

    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-scan-results
        path: |
          tools/annotation/bandit-results.json
          tools/annotation/safety-results.json

  build-check:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install dependencies
      run: |
        cd ${{ env.ANNOTATION_TOOL_PATH }}
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Check import structure
      run: |
        cd ${{ env.ANNOTATION_TOOL_PATH }}
        export PYTHONPATH=$PWD:$PYTHONPATH
        python -c "
        import sys
        import importlib
        import os
        
        # Test core imports
        modules_to_test = [
            'api', 'app', 'dto',
            'core.session_manager', 'core.path_resolver', 'core.annotation_store', 'core.dataset_builder',
            'services.annotation_service', 'services.session_service', 'services.dataset_service', 'services.settings_service',
            'db.connection', 'db.schema', 'db.repository', 'db.projects', 'db.datasets', 'db.classes', 'db.indexer',
            'models.annotation', 'models.dataset'
        ]
        
        failed_imports = []
        for module in modules_to_test:
            try:
                importlib.import_module(module)
                print(f'‚úÖ {module}')
            except Exception as e:
                print(f'‚ùå {module}: {e}')
                failed_imports.append(module)
        
        if failed_imports:
            print(f'\\nFailed to import {len(failed_imports)} modules: {failed_imports}')
            sys.exit(1)
        else:
            print('\\n‚úÖ All core modules imported successfully')
        "

    - name: Test Flask app startup
      run: |
        cd ${{ env.ANNOTATION_TOOL_PATH }}
        export PYTHONPATH=$PWD:$PYTHONPATH
        timeout 10 python -c "
        from app import app
        print('‚úÖ Flask app created successfully')
        
        # Test that routes are registered
        with app.app_context():
            routes = [str(rule) for rule in app.url_map.iter_rules()]
            print(f'üìç Registered routes: {len(routes)}')
            for route in sorted(routes):
                print(f'  {route}')
        " || echo "‚ö†Ô∏è App startup test completed with timeout (expected for server startup)"
